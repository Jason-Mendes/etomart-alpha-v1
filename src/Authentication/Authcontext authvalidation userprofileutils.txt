AuthContext.js:
D:\JasonMendes\Github\etomart-alpha-v1\src\Authentication\context\AuthContext.js
src\Authentication\context\AuthContext.js
import React, { createContext, useState, useContext, useEffect } from 'react';

// TODO: Replace with actual Firebase import when integrating
const mockFirebase = {
  auth: () => ({
    onAuthStateChanged: (callback) => {
      // Simulate auth state change
      callback(null);
      return () => {};
    },
  }),
};

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    // TODO: Replace with actual Firebase auth when integrating
    const unsubscribe = mockFirebase.auth().onAuthStateChanged((user) => {
      setUser(user);
      setLoading(false);
    });

    return () => unsubscribe();
  }, []);

  const login = async (phoneNumber, password, email = '') => {
    setLoading(true);
    setError(null);
    try {
      // TODO: Implement actual Firebase login
      const userData = { phoneNumber, email, id: 'mock-user-id' }; // Mock user data
      setUser(userData);
      localStorage.setItem('user', JSON.stringify(userData));
    } catch (error) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  const signup = async (name, surname, phoneNumber, password, email = '', namibianId = '') => {
    setLoading(true);
    setError(null);
    try {
      // TODO: Implement actual Firebase signup
      const userData = { name, surname, phoneNumber, email, namibianId, id: 'mock-user-id' }; // Mock user data
      setUser(userData);
      localStorage.setItem('user', JSON.stringify(userData));
    } catch (error) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  const logout = async () => {
    setLoading(true);
    setError(null);
    try {
      // TODO: Implement actual Firebase logout
      setUser(null);
      localStorage.removeItem('user');
    } catch (error) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  const value = {
    user,
    loading,
    error,
    login,
    signup,
    logout,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

authValidationSchemas.js:
D:\JasonMendes\Github\etomart-alpha-v1\src\Authentication\validation\authValidationSchemas.js
src\Authentication\validation\authValidationSchemas.js
import * as Yup from 'yup';

export const loginSchema = Yup.object().shape({
  phoneNumber: Yup.string()
    .matches(/^\+?[1-9]\d{1,14}$/, 'Invalid phone number')
    .required('Phone number is required'),
  email: Yup.string()
    .email('Invalid email address'),
  password: Yup.string()
    .min(8, 'Password must be at least 8 characters')
    .required('Password is required'),
});

export const signupSchema = Yup.object().shape({
    name: Yup.string()
      .min(2, 'Name must be at least 2 characters')
      .required('Name is required'),
    surname: Yup.string()
      .min(2, 'Surname must be at least 2 characters')
      .required('Surname is required'),
    phoneNumber: Yup.string()
      .matches(/^\+?[1-9]\d{1,14}$/, 'Invalid phone number')
      .required('Phone number is required'),
    email: Yup.string()
      .email('Invalid email address'),
    password: Yup.string()
      .min(8, 'Password must be at least 8 characters')
      .matches(
        /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/,
        'Password must contain at least one uppercase letter, one lowercase letter, one number, and one special character'
      )
      .required('Password is required'),
    confirmPassword: Yup.string()
      .oneOf([Yup.ref('password'), null], 'Passwords must match')
      .required('Confirm password is required'),
    namibianId: Yup.string()
      .matches(/^[0-9]{11}$/, 'Invalid Namibian ID (must be 11 digits)'),
  });
  
  export const profileUpdateSchema = Yup.object().shape({
    name: Yup.string()
      .min(2, 'Name must be at least 2 characters')
      .required('Name is required'),
    surname: Yup.string()
      .min(2, 'Surname must be at least 2 characters')
      .required('Surname is required'),
    phoneNumber: Yup.string()
      .matches(/^\+?[1-9]\d{1,14}$/, 'Invalid phone number')
      .required('Phone number is required'),
    email: Yup.string()
      .email('Invalid email address'),
    namibianId: Yup.string()
      .matches(/^[0-9]{11}$/, 'Invalid Namibian ID (must be 11 digits)'),
    // Add more fields as needed for profile updates
  });

userProfileUtils.js:
D:\JasonMendes\Github\etomart-alpha-v1\src\Authentication\utils\userProfileUtils.js
src\Authentication\utils\userProfileUtils.js
// Utility function to format user data
export const formatUserData = (userData) => {
  return {
    id: userData.id || '',
    name: userData.name || '',
    surname: userData.surname || '',
    phoneNumber: userData.phoneNumber || '',
    email: userData.email || '',
    namibianId: userData.namibianId || '',
    // Add more fields as needed
  };
};

// Utility function to validate email
export const validateEmail = (email) => {
  const re = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
  return re.test(String(email).toLowerCase());
};

// Utility function to validate phone number
export const validatePhoneNumber = (phoneNumber) => {
  const re = /^\+?[1-9]\d{1,14}$/;
  return re.test(phoneNumber);
};

// Utility function to format phone number
export const formatPhoneNumber = (phoneNumber) => {
  // This is a simple implementation. You might want to use a library like libphonenumber-js for more robust formatting
  const cleaned = ('' + phoneNumber).replace(/\D/g, '');
  const match = cleaned.match(/^(\d{3})(\d{3})(\d{4})$/);
  if (match) {
    return '(' + match[1] + ') ' + match[2] + '-' + match[3];
  }
  return phoneNumber;
};

// Utility function to validate Namibian ID
export const validateNamibianId = (namibianId) => {
  const re = /^[0-9]{11}$/;
  return re.test(namibianId);
};

// Utility function to mask sensitive information
export const maskSensitiveInfo = (info, showLast = 4) => {
  if (!info) return '';
  const length = info.length;
  return '*'.repeat(length - showLast) + info.slice(-showLast);
};